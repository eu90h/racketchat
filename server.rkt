#lang racket
(require racket/tcp)

(define PORT 1234)

(define connections null)
(define (add-connection! c) (set! connections (append connections (list c))))
(define (rem-connection! c) (set! connections (filter (lambda (x) (not (eq? x c))) connections)))

(define-struct connection (in out username))
(define (connection-close c)
	(close-input-port (connection-in c))
	(close-output-port (connection-out c))
	(rem-connection! c)
	(broadcast* (string-append (connection-username c) " has left.")))

(define (broadcast msg sender-conn)
	(define (send-to conn)
		(define (exn-handler e)
			(displayln "network error")
			(displayln e)
			(rem-connection! conn)
			(broadcast* (string-append (connection-username conn) " has left.")))
		(with-handlers ([exn:fail:network? exn-handler])
			(displayln (string-append (connection-username sender-conn) ": " msg) (connection-out conn))
			(flush-output (connection-out conn))))
	(thread (lambda () (map send-to (filter (lambda (c) (not (eq? c sender-conn))) connections)))))

(define (broadcast* msg (sender-conn null))
	(define (send-to conn)
		(define (exn-handler e)
			(displayln "network error")
			(displayln e)
			(rem-connection! conn)
			(broadcast* (string-append (connection-username conn) " has left.")))
		(with-handlers ([exn:fail:network? exn-handler])
			(displayln msg (connection-out conn))
			(flush-output (connection-out conn))))
	(if (null? sender-conn) (thread (lambda () (map send-to connections)))
		(thread (lambda () (map send-to (filter (lambda (c) (not (eq? c sender-conn))) connections))))))

(define (handle connection)
	(define (exn-handler e)
		(displayln "network error")
		(displayln e)
		(rem-connection! connection)
		(broadcast* (string-append (connection-username connection) " has left.")))

	(with-handlers ([exn:fail:network? exn-handler])
		(define msg (read-line (connection-in connection)))
		(unless (eof-object? msg)
			(broadcast msg connection)
			(handle connection))))

(define (get-username in out)
	(define (valid-username? name)
		(if (string? name) (not (zero? (string-length name)))
			#f))

	; TODO: actually do something useful here
	(define (exn-handler e)
		(displayln "network error")
		(displayln e))

	(with-handlers ([exn:fail:network? exn-handler])
		(define name (read-line in))
		(cond [(not (valid-username? name))
				(write-byte 0 out) (flush-output out)
				(get-username in out)]
			[else
				(write-byte 1 out) (flush-output out)
				name))

(define (accept-and-handle listener)
	(define cust (make-custodian))
	(parameterize ([current-custodian cust])
		(define-values (in out) (tcp-accept listener))
		(define username (get-username in out))
		(unless (not (string? username))
			(thread (lambda ()
				(define conn (connection in out username))
				(add-connection! conn)
				(broadcast* (string-append username " has joined.") conn)
				(handle conn)
				(connection-close conn))))))

(define (serve port)
	(define main-cust (make-custodian))
	(parameterize ([current-custodian main-cust])
		(define listener (tcp-listen port 5 #t))
		(define (loop)
			(accept-and-handle listener)
			(loop))
		(thread loop))
	(lambda () (custodian-shutdown-all main-cust)))

(define stop (serve PORT))
